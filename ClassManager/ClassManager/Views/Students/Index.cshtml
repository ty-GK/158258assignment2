@model ClassManager.ViewModels.StudentIndexViewModel
@using PagedList.Mvc

@{
    ViewBag.Title = "Index";
}

<h2>Hi, @ViewBag.UserName</h2>

<div>
    @using (Html.BeginForm("Index", "Students", FormMethod.Get, new
    {
        @class = "navbar-form navbar-left"
    }))
    {
        <div class="form-group" style="display: flex;">
            @Html.TextBox("Search", null, new
            {
                @class = "form-control",
                @placeholder = "Search Students"
            })
            <button type="submit" class="btn btn-default">Search</button>
        </div>
    }
</div>
<div id="FilterAndSort">
    @using (Html.BeginForm("Index", "Students", FormMethod.Get))
    {
        <label>Filter by enrollment year:</label>
        @Html.DropDownListFor(vm => vm.EnrollmentYear, Model.EnYearFilterItems, "All");

        <label>Sort by:</label>
        @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"), "Default")

        <input type="submit" value="Apply" />
        <input type="hidden" name="Search" id="Search" value="@Model.Search" />
    }
</div>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<br />
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Students.First().Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Students.First().StudentNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Students.First().EnrollmentYear)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Students.First().Gender)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Students.First().Age)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Students)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StudentNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EnrollmentYear)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Gender)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.StudentId }) |
                @Html.ActionLink("Details", "Details", new { id = item.StudentId }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.StudentId })
            </td>
        </tr>
    }
</table>

<div>
    Page @(Model.Students.PageCount <Model.Students.PageNumber ? 0 : Model.Students.PageNumber) of @Model.Students.PageCount
    @Html.PagedListPager(Model.Students, page => Url.Action("Index", new { enrollmentYear = Model.EnrollmentYear, search = Model.Search, page = page, sortBy = Model.SortBy}))
</div>

<div id="clock">Current time: <span id="time">Loading...</span></div>

<script src="~/Scripts/getCurrentTime.js"></script>
<script>
    function updateTime() {
        document.getElementById("time").textContent = getCurrentTime();
    }
    updateTime();
    setInterval(updateTime, 1000);
</script>
